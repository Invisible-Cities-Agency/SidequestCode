{
  "name": "@invisiblecities/sidequest-cqo",
  "version": "0.1.0-alpha.10",
  "description": "Configuration-agnostic TypeScript and ESLint orchestrator with real-time watch mode, SQLite persistence, and intelligent terminal detection",
  "type": "module",
  "main": "dist/lib/cli.js",
  "bin": {
    "sidequest-cqo": "dist/lib/cli.js",
    "scqo": "dist/lib/cli.js"
  },
  "scripts": {
    "prepare": "husky",
    "build": "tsc",
    "dev": "tsx lib/cli.ts",
    "sidequest": "tsx lib/cli.ts --verbose",
    "sidequest:watch": "tsx lib/cli.ts --watch",
    "sidequest:watch:eslint": "tsx lib/cli.ts --watch --include-eslint",
    "sidequest:watch:strict": "tsx lib/cli.ts --watch --strict",
    "sidequest:analyze": "tsx lib/cli.ts",
    "sidequest:analyze:eslint": "tsx lib/cli.ts --include-eslint",
    "sidequest:analyze:strict": "tsx lib/cli.ts --strict",
    "sidequest:report": "tsx lib/cli.ts --verbose",
    "sidequest:precommit": "tsx lib/cli.ts --verbose --no-persistence",
    "sidequest:report:strict": "tsx lib/cli.ts --verbose --strict",
    "sidequest:config": "tsx lib/cli.ts --config",
    "sidequest:config:show": "tsx lib/cli.ts --config show",
    "sidequest:config:edit": "tsx lib/cli.ts --config edit",
    "sidequest:config:reset": "tsx lib/cli.ts --config reset",
    "sidequest:help": "tsx lib/cli.ts --help",
    "sidequest:help:markdown": "tsx lib/cli.ts --help-markdown",
    "sidequest:help:quick": "tsx lib/cli.ts --help-quick",
    "sidequest:ai-context": "tsx lib/cli.ts --ai-context",
    "sidequest:prd": "tsx lib/cli.ts --prd",
    "sidequest:debug:terminal": "tsx lib/cli.ts --debug-terminal",
    "sidequest:session:reset": "tsx lib/cli.ts --reset-session",
    "test": "NODE_OPTIONS='--no-warnings' vitest run --config vitest.config.ts --reporter=verbose",
    "test:core": "NODE_OPTIONS='--no-warnings' vitest run '.vitest/core/**/*.test.{mjs,ts}' --reporter=verbose",
    "test:edge": "NODE_OPTIONS='--no-warnings' vitest run '.vitest/edge/**/*.test.mjs' --reporter=verbose",
    "test:integration": "NODE_OPTIONS='--no-warnings' vitest run '.vitest/integration/**/*.test.{mjs,ts}' --reporter=verbose",
    "test:watch": "vitest '.vitest/core/**/*.test.{mjs,ts}'",
    "test:watch:edge": "vitest '.vitest/edge/**/*.test.mjs'",
    "test:coverage": "NODE_OPTIONS='--no-warnings' vitest run --coverage",
    "test:ui": "vitest --ui",
    "test:ci": "NODE_OPTIONS='--no-warnings' vitest run --reporter=json --outputFile=./test-results.json",
    "lint": "eslint . --ext .ts,.tsx --fix",
    "types:unused": "ts-unused-exports tsconfig.json --showLineNumber",
    "typecheck": "tsc --noEmit",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "clean": "rm -rf dist",
    "prepublishOnly": "npm run clean && npm run format && npm run build && npm run test && npm run typecheck",
    "postinstall": "node -e \"const fs=require('fs');const path=require('path');function findPackageJson(){const possiblePaths=[path.join(process.cwd(),'../../../package.json'),path.join(process.cwd(),'../../../../package.json'),path.join(process.cwd(),'../../package.json'),path.join(process.cwd(),'../package.json'),path.join(process.cwd(),'package.json')];let current=process.cwd();while(current!==path.dirname(current)){const pkgPath=path.join(current,'package.json');if(fs.existsSync(pkgPath)){const pkg=JSON.parse(fs.readFileSync(pkgPath,'utf8'));if(pkg.name&&!pkg.name.includes('sidequest-cqo')&&(pkg.dependencies||pkg.devDependencies)){return pkgPath}}current=path.dirname(current)}for(const p of possiblePaths){if(fs.existsSync(p)){const pkg=JSON.parse(fs.readFileSync(p,'utf8'));if(pkg.name&&!pkg.name.includes('sidequest-cqo')){return p}}}return null}function detectPackageManager(){if(process.env.npm_config_user_agent){const agent=process.env.npm_config_user_agent;if(agent.includes('pnpm'))return 'pnpm';if(agent.includes('yarn'))return 'yarn';if(agent.includes('bun'))return 'bun'}return 'npm'}try{const pkgPath=findPackageJson();if(pkgPath){const pkg=JSON.parse(fs.readFileSync(pkgPath,'utf8'));if(!pkg.scripts)pkg.scripts={};const pm=detectPackageManager();const runCmd=pm==='npm'?'npm run':pm==='yarn'?'yarn':pm==='bun'?'bun run':`${pm} run`;const scripts={'sidequest:report':'sidequest-cqo --verbose','sidequest:watch':'sidequest-cqo --watch','sidequest:config':'sidequest-cqo --config','sidequest:help':'sidequest-cqo --help'};let added=[];Object.entries(scripts).forEach(([name,cmd])=>{if(!pkg.scripts[name]){pkg.scripts[name]=cmd;added.push(name)}});if(added.length>0){fs.writeFileSync(pkgPath,JSON.stringify(pkg,null,2));console.log(`\\nðŸ“¦ SideQuest CQO installed!\\nâœ… Added scripts: ${added.join(', ')}`);console.log(`\\nðŸš€ Quick start:\\n   ${runCmd} sidequest:report\\n   ${runCmd} sidequest:watch\\n`)}else{console.log('\\nðŸ“¦ SideQuest CQO installed! Scripts already exist.\\n')}}else{const pm=detectPackageManager();const execCmd=pm==='npm'?'npx':pm==='yarn'?'yarn dlx':pm==='bun'?'bunx':`${pm}x`;console.log(`\\nðŸ“¦ SideQuest CQO installed!\\nðŸ’¡ Use: ${execCmd} sidequest-cqo --help\\n`)}}catch(e){const pm=detectPackageManager();const execCmd=pm==='npm'?'npx':pm==='yarn'?'yarn dlx':pm==='bun'?'bunx':`${pm}x`;console.log(`\\nðŸ“¦ SideQuest CQO installed!\\nðŸ’¡ Use: ${execCmd} sidequest-cqo --help\\n`)}\"",
    "alpha-release": "npm version prerelease --preid=alpha && npm publish --tag alpha",
    "beta-release": "npm version prerelease --preid=beta && npm publish --tag beta"
  },
  "keywords": [
    "typescript",
    "eslint",
    "code-quality",
    "configuration-agnostic",
    "tsconfig",
    "orchestrator",
    "watch-mode",
    "terminal",
    "cli",
    "developer-tools",
    "real-time",
    "violations",
    "linting",
    "compilation"
  ],
  "author": {
    "name": "Ian Armstrong, Invisible Cities, LLC",
    "email": "skyline@invisiblecities.agency"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Invisible-Cities-Agency/SidequestCode.git"
  },
  "bugs": {
    "url": "https://github.com/Invisible-Cities-Agency/SidequestCode/issues"
  },
  "homepage": "https://github.com/Invisible-Cities-Agency/SidequestCode#readme",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "os": [
    "darwin",
    "linux",
    "win32"
  ],
  "files": [
    "dist/",
    "README.md",
    "LICENSE",
    "docs/CHANGELOG.md"
  ],
  "dependencies": {},
  "devDependencies": {
    "kysely": "^0.27.0",
    "zod": "^3.25.67",
    "better-sqlite3": "^11.0.0",
    "@types/better-sqlite3": "^7.6.13",
    "@types/node": "^20.0.0",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "@vitest/coverage-v8": "^1.6.0",
    "@vitest/ui": "^1.6.0",
    "eslint": "^8.57.0",
    "eslint-plugin-unicorn": "^55.0.0",
    "husky": "^9.1.7",
    "lint-staged": "^16.1.2",
    "prettier": "^3.3.0",
    "ts-unused-exports": "^11.0.1",
    "tsx": "^4.20.0",
    "type-fest": "^4.41.0",
    "typescript": "^5.8.3",
    "vitest": "^1.6.0"
  },
  "peerDependencies": {
    "eslint": ">=8.0.0",
    "typescript": ">=4.5.0"
  },
  "publishConfig": {
    "access": "public",
    "registry": "https://registry.npmjs.org/"
  },
  "funding": {
    "type": "organization",
    "url": "https://github.com/sponsors/Invisible-Cities-Agency"
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": [
      "prettier --write",
      "eslint --fix"
    ],
    "*.{json,md}": [
      "prettier --write"
    ]
  }
}
